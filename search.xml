<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>reverse逆向基础</title>
      <link href="/2020/08/21/reverse/reverse%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/08/21/reverse/reverse%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>1.esp：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。</p><p>2.ebp：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。</p><p>3.eax 是”累加器”(accumulator), 它是很多加法乘法指令的缺省寄存器。</p><p>4.ebx 是”基地址”(base)寄存器, 在内存寻址时存放基地址</p><p>5.ecx 是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。</p><p>6.edx 则总是被用来放整数除法产生的余数。</p><p>7.esi&#x2F;edi分别叫做”源&#x2F;目标索引寄存器”(source&#x2F;destination index),因为在很多字符串操作指令中, DS:ESI指向源串,而ES:EDI指向目标串. mov eax, [ebx+esi] </p><p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/1.png" alt="1"><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/2.png" alt="1"></p><h4 id="基本汇编指令"><a href="#基本汇编指令" class="headerlink" title="基本汇编指令"></a>基本汇编指令</h4><p>mov 赋值</p><p>lea 传送(赋地址)</p><p>add&#x2F;sub&#x2F;xor&#x2F;shl&#x2F;shr&#x2F;inc(递增)&#x2F;dec(递减) 各种运算</p><p>jmp 跳转</p><p>push&#x2F;pop 压栈&#x2F;出栈</p><p>call 调用子函数 &#x3D;&#x3D; push eip ; jmp sub</p><p>leave恢复主调函数的栈帧以准备返回 &#x3D;&#x3D;    mov    ebp,    esp ;    pop    ebp</p><p>ret 从子函数返回 &#x3D;&#x3D; pop eip</p><h4 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h4><p>立即数寻址：mov eax, 0x1 </p><p>寄存器寻址：mov eax, ebx</p><p>直接寻址：mov eax, [2000h] </p><p>寄存器间接寻址：mov eax, [ebx] </p><p>基址变址寻址：mov eax, [ebx+esi] </p><p>寄存器相对寻址：mov eax, [ebx+100h] </p><p>相对基址变址寻址：mov eax, [ebx+esi+100h] </p><p>比例变址寻址：mov eax, [ebx+4*ecx]</p><h3 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h3><p>栈是一种先进后出的数据结构，基本操作是push和pop。通常有一个栈底指针(bp)和一个栈顶指针(sp)指示位置。</p><p>在子函数头部大部分会有三类指令</p><p>1.push rbp 将rbp压栈</p><p>2.mov rbp, rsp 将上一个栈帧的栈顶作为下一个栈帧的栈底</p><p>3.sub rsp, xx 令栈顶增长，开辟栈帧</p><p>4.mov [rbp+xx], rbx 保存环境</p><p>栈帧由高地址向低地址增长，因此增长栈顶使用 sub 指令</p><p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/%E6%A0%88%E7%BB%93%E6%9E%84.png" alt="栈结构"></p><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><h4 id="数据类型及占用空间"><a href="#数据类型及占用空间" class="headerlink" title="数据类型及占用空间"></a>数据类型及占用空间</h4><h5 id="有符号整数类型"><a href="#有符号整数类型" class="headerlink" title="有符号整数类型"></a>有符号整数类型</h5><table><thead><tr><th align="center">signed char</th><th align="center">1byte</th><th align="center">-2^7 ~ 2^7-1</th></tr></thead><tbody><tr><td align="center">short int 或short</td><td align="center">2bytes</td><td align="center">-2^15 ~ 2^15-1</td></tr><tr><td align="center">int</td><td align="center">4bytes</td><td align="center">-2^31 ~ 2^31-1</td></tr><tr><td align="center">long int或long</td><td align="center">4bytes</td><td align="center">-2^31 ~ 2^31-1</td></tr><tr><td align="center">long long int或long long</td><td align="center">8bytes</td><td align="center">-2^63 ~ 2^63-1</td></tr></tbody></table><h5 id="无符号整数类型"><a href="#无符号整数类型" class="headerlink" title="无符号整数类型"></a>无符号整数类型</h5><table><thead><tr><th align="center">signed char</th><th align="center">1byte</th><th align="center">0~2^8-1</th></tr></thead><tbody><tr><td align="center">short int 或short</td><td align="center">2bytes</td><td align="center">0~2^16-1</td></tr><tr><td align="center">int</td><td align="center">4bytes</td><td align="center">0~2^32-1</td></tr><tr><td align="center">long int或long</td><td align="center">4bytes</td><td align="center">0~2^32-1</td></tr><tr><td align="center">long long int或long long</td><td align="center">8bytes</td><td align="center">0~2^64-1</td></tr></tbody></table><h5 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h5><table><thead><tr><th align="center">float</th><th align="center">4bytes</th><th align="center">精确到6位</th></tr></thead><tbody><tr><td align="center">double</td><td align="center">8bytes</td><td align="center">精确到15位</td></tr><tr><td align="center">long double</td><td align="center">12bytes</td><td align="center">精确到18位</td></tr></tbody></table><h4 id="函数参数传递"><a href="#函数参数传递" class="headerlink" title="函数参数传递"></a>函数参数传递</h4><table><thead><tr><th align="center">传值</th><th align="center">传指针</th><th align="center">传引用</th></tr></thead><tbody><tr><td align="center">void function(int <code>x</code>){代码块}</td><td align="center">void function(int <code>*x</code>){代码块}</td><td align="center">void function(int <code>&amp;x</code>){代码块}</td></tr><tr><td align="center">传递的为值,函数内用的是实参的副本，故<code>不能</code>修改实参的值</td><td align="center">传递的地址, 可以修改实参的值，指针是实体</td><td align="center">传递实参的指针(地址)，可以修改实参的值，引用是别名</td></tr></tbody></table><h4 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h4><table><thead><tr><th align="center">cdecl (default)</th><th align="center">stdcall</th><th align="center">fastcall</th></tr></thead><tbody><tr><td align="center">int func(int x,int y)<br>int __cdecl func(int x,int y)</td><td align="center">int _stdcall func(int x,int y)</td><td align="center">int fastcall func(int x,int y)</td></tr><tr><td align="center">参数入栈顺序：从右到左<br> 还原栈者：调用者修改栈 <br>函数名：前加下划线：_func</td><td align="center">参数入栈顺序：从右向左<br>还原栈者：被调用函数自身修改栈<br>函数名:    _function@arg_size</td><td align="center">参数入栈顺序：第一二参数不压栈,ecx,edx, 从右到左<br>还原栈者：被调用者修改栈<br>函数名格式:    _function@arg_size</td></tr><tr><td align="center">通过栈(32 bit)<br>rdi,rsi,rdx(64bit)</td><td align="center">通过栈(32 bit)<br>rdi,rsi,rdx(64bit)</td><td align="center">通过栈(32 bit)<br>rdx,rcx,…(64bit)</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AES&amp;CBC</title>
      <link href="/2020/04/01/crypto/Lattice/Hidden%20number%20problem/"/>
      <url>/2020/04/01/crypto/Lattice/Hidden%20number%20problem/</url>
      
        <content type="html"><![CDATA[<p>由于ecb模式是直接对明文进行分块加密，因此存在明文攻击的可能性，具体参考：<a href="https://zachgrace.com/2015/04/17/attacking-ecb.html">Attacking ECB</a></p><p><strong>ecb模式攻击原理：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/image-20200920191159321.png" alt="image-20200920191159321"></p><p>ecb模式使用相同的key分块对明文分别进行加密，相同的明文获得相同的密文输出<br>根据这一特性，可以构造如下数据进行攻击：<br>首先输入blocksize-1的填充，这样未知字符串的第一个字符将落到填充块的最后一个字节： </p><p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/image-20200920191217133.png" alt="image-20200920191217133"></p><p>这时会得到填充块的一个密文输出，爆破最后一个字节，直到产生与刚才相同的密文输出，就可以确定未知字符串的一个字节，重复这个过程就可以得到完整的未知字符串。</p><p><strong>攻击条件</strong></p><p>要能够像包含未知字符串的明文中插入数据（本题满足条件） </p><p><strong>2020科来杯山东省大学生网络安全技能大赛预选赛–泡面密码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flag = flag&#123;secret&#125;</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(secret)==<span class="number">16</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg</span>):</span><br><span class="line">    pad_length = <span class="number">16</span>-<span class="built_in">len</span>(msg)%<span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> (msg+<span class="string">&#x27;\x00&#x27;</span>*((pad_length) % <span class="number">16</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key,msg</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    encrypted = cipher.encrypt(msg).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line">choose <span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span></span><br><span class="line"><span class="number">1.</span> <span class="built_in">print</span> encrypt(key,pad(<span class="built_in">input</span>+secret))</span><br><span class="line"><span class="number">2.</span> check your secret</span><br></pre></td></tr></table></figure><p>我们逐位爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256</span>(<span class="params">str1,enc</span>):</span><br><span class="line">payload = string.ascii_letters + string.digits + <span class="string">&#x27;_&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> payload:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> payload:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> payload:</span><br><span class="line">            tmp = a+b+c+d</span><br><span class="line">                strs = tmp + <span class="built_in">str</span>(str1)</span><br><span class="line">                ans = hashlib.sha256(strs).hexdigest()</span><br><span class="line">                <span class="keyword">if</span> ans==enc:</span><br><span class="line">               <span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">p=remote(<span class="string">&quot;122.112.209.168&quot;</span>,<span class="number">4444</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;SHA256(XXXX+&quot;</span>)</span><br><span class="line">str1 = p.recvuntil(<span class="string">&quot;)&quot;</span>,<span class="literal">True</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot; == &quot;</span>)</span><br><span class="line">enc = p.recvuntil(<span class="string">&quot;\n&quot;</span>,<span class="literal">True</span>)</span><br><span class="line">xxxx =  sha256(str1.strip(),enc.strip())</span><br><span class="line">p.sendline(xxxx)</span><br><span class="line">zz = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;): &quot;</span>)</span><br><span class="line">p.sendline((<span class="string">&quot;a&quot;</span>*(<span class="number">16</span>-i-<span class="number">1</span>)).encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">enc = p.recvline().strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> payload:</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> payload:</span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;): &quot;</span>)</span><br><span class="line">p.sendline(((<span class="string">&quot;a&quot;</span>*(<span class="number">16</span>-i-<span class="number">1</span>))).encode(<span class="string">&#x27;hex&#x27;</span>)+zz+a+b)</span><br><span class="line">tmp = p.recvline().strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> tmp.startswith(enc[:<span class="number">32</span>])==<span class="literal">True</span>:</span><br><span class="line">zz += a+b</span><br><span class="line">log.info(<span class="string">&quot;the secret char is --&gt; 0x&quot;</span>+a+b)</span><br><span class="line"><span class="built_in">print</span> zz</span><br><span class="line"><span class="comment"># 11111</span></span><br><span class="line"><span class="comment"># ca7d19da33ac4acb15367fbbf7d059cacdc7791eb103abd81b57e6674cf09449\n</span></span><br><span class="line"><span class="comment"># 914ebeb6af4ca8522bc2bd774b41b2a9</span></span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019山东省赛深思杯wp</title>
      <link href="/2019/12/20/%E6%AF%94%E8%B5%9B/2019%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9B%E6%B7%B1%E6%80%9D%E6%9D%AF/"/>
      <url>/2019/12/20/%E6%AF%94%E8%B5%9B/2019%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9B%E6%B7%B1%E6%80%9D%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h3><h4 id="简单apk"><a href="#简单apk" class="headerlink" title="简单apk"></a>简单apk</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sdnisc.mr_hello.apk2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">check</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] v0 = arg.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] key = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(v0.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;请输入内容&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">v3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; v0.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(v0[i] &lt; <span class="number">0x30</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你的输入应该为纯数字！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(v0[i] &gt; <span class="number">57</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你的输入应该为纯数字！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(v0.length != <span class="number">15</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;出错啦！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">in</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(v3 &lt; arg.length()) &#123;</span><br><span class="line">            in = in + key[arg.charAt(v3) - <span class="number">0x30</span>];</span><br><span class="line">            ++v3;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> in.equals(<span class="string">&quot;sic19Sdc02ds10c&quot;</span>) ? <span class="string">&quot;flag&#123;&quot;</span> + Data.md5(arg) + <span class="string">&quot;&#125;&quot;</span> : <span class="string">&quot;你输入的数字不正确&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(String plainText)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] v2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(plainText.getBytes());</span><br><span class="line">            v2 = md.digest();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;没有这个算法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">md5code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, v2).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0x20</span> - md5code.length(); ++i) &#123;</span><br><span class="line">            md5code = <span class="string">&quot;0&quot;</span> + md5code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> md5code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![image-20220402163738360](&#x2F;Users&#x2F;ne0&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220402163738360.png)</p><p>逻辑结构比较简单，就是明文比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">key = [<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]</span><br><span class="line">target = <span class="string">&#x27;sic19Sdc02ds10c&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> target:</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">if</span> i == key[n]:</span><br><span class="line">flag += <span class="built_in">chr</span>(n+<span class="number">0x30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+hashlib.md5(flag.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag&#123;fa325b75b81d692dc1bce36cf1b7eb36&#125;</span></span><br></pre></td></tr></table></figure><h4 id="贪吃蛇"><a href="#贪吃蛇" class="headerlink" title="贪吃蛇"></a>贪吃蛇</h4><p>定位到关键函数Check，发现调用encode加密和md5后，将字符串key进行明文比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sdnisc.mr_hello.apk1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Check</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">check</span><span class="params">(<span class="type">int</span> code, <span class="type">int</span> arg1, <span class="type">int</span> arg2)</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">code</span> <span class="operator">=</span>= <span class="number">90</span> ? <span class="built_in">this</span>.encrypt(code, arg1, arg2) : <span class="string">&quot;Score is too low&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">(<span class="type">int</span> score, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] v2_1;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> String.valueOf(score) + String.valueOf(x) + String.valueOf(y);</span><br><span class="line">        <span class="keyword">if</span>(key.length() == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                v2_1 = MessageDigest.getInstance(<span class="string">&quot;md5&quot;</span>).digest(encode.encode(key).getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;没有这个md5算法！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, v2_1).toString(<span class="number">16</span>);</span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0x20</span> - str.length(); ++i) &#123;</span><br><span class="line">                str = <span class="string">&quot;0&quot;</span> + str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> str.equals(<span class="string">&quot;cc3fa9c107c0d8b48d6af32d26eacf2a&quot;</span>) ? <span class="string">&quot;flag&#123;&quot;</span> + key + <span class="string">&quot;&#125;&quot;</span> : <span class="string">&quot;something wrong&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;something wrong&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>encode函数实际上是base64加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sdnisc.mr_hello.apk1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">encode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">Code</span> <span class="operator">=</span> <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encode</span><span class="params">(String srcStr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(srcStr != <span class="literal">null</span> &amp;&amp; srcStr.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span>[] srcStrCh = srcStr.toCharArray();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">asciiBinStrB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; srcStrCh.length; ++i) &#123;</span><br><span class="line">                String v4;</span><br><span class="line">                <span class="keyword">for</span>(v4 = Integer.toBinaryString(srcStrCh[i]); v4.length() &lt; <span class="number">8</span>; v4 = <span class="string">&quot;0&quot;</span> + v4) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                asciiBinStrB.append(v4);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(asciiBinStrB.length() % <span class="number">6</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                asciiBinStrB.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">asciiBinStr</span> <span class="operator">=</span> String.valueOf(asciiBinStrB);</span><br><span class="line">            <span class="type">char</span>[] codeCh = <span class="keyword">new</span> <span class="title class_">char</span>[asciiBinStr.length() / <span class="number">6</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">v7</span> <span class="operator">=</span> asciiBinStr;</span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; codeCh.length; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">v8</span> <span class="operator">=</span> Integer.parseInt(v7.substring(<span class="number">0</span>, <span class="number">6</span>), <span class="number">2</span>);</span><br><span class="line">                v7 = v7.substring(<span class="number">6</span>);</span><br><span class="line">                codeCh[i] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>.charAt(v8);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(String.valueOf(codeCh));</span><br><span class="line">            <span class="keyword">if</span>(srcStr.length() % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                code.append(<span class="string">&quot;==&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(srcStr.length() % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                code.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">76</span>; i &lt; code.length(); i += <span class="number">76</span>) &#123;</span><br><span class="line">                code.insert(i, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> String.valueOf(code);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> srcStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据流程构造exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;cc3fa9c107c0d8b48d6af32d26eacf2a&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">999</span>):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">999</span>):</span><br><span class="line">key = <span class="string">&#x27;90&#x27;</span> + <span class="built_in">str</span>(x) + <span class="built_in">str</span>(y)</span><br><span class="line">tmp = hashlib.md5(base64.b64encode(key)).hexdigest()</span><br><span class="line"><span class="keyword">if</span> tmp == target:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+key+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag&#123;90585675&#125;</span></span><br></pre></td></tr></table></figure><h4 id="LargeCheck"><a href="#LargeCheck" class="headerlink" title="LargeCheck"></a>LargeCheck</h4><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><h4 id="python是世界上最好的语言"><a href="#python是世界上最好的语言" class="headerlink" title="python是世界上最好的语言"></a>python是世界上最好的语言</h4><p>修改pyc文件头为03f3，uncompyle6反编译为python文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 2.7.18 (v2.7.18:8d21aa21f2, Apr 19 2020, 20:48:48) </span></span><br><span class="line"><span class="comment"># [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)]</span></span><br><span class="line"><span class="comment"># Embedded file name: flag.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2019-10-21 14:01:56</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">flag = <span class="string">&#x27;flag&#123;**********************&#125;&#x27;</span></span><br><span class="line">Sd = []</span><br><span class="line">SdSd = []</span><br><span class="line"><span class="keyword">for</span> SdSdSdSd <span class="keyword">in</span> flag:</span><br><span class="line">    Sd.append(<span class="built_in">ord</span>(SdSdSdSd))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">SdSdSd</span>):</span><br><span class="line">    SdSdSdSdSd = <span class="literal">True</span></span><br><span class="line">    SdSdSdSd = <span class="number">2</span></span><br><span class="line">    sq = <span class="built_in">int</span>(math.sqrt(SdSdSd)) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> SdSdSdSd &lt;= sq:</span><br><span class="line">        <span class="keyword">if</span> SdSdSd % SdSdSdSd == <span class="number">0</span>:</span><br><span class="line">            SdSd.append(SdSdSdSd + <span class="number">1</span>)</span><br><span class="line">            SdSdSdSdSd = <span class="literal">False</span></span><br><span class="line">            func(SdSdSd / SdSdSdSd)</span><br><span class="line">            SdSdSdSd += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        SdSdSdSd += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> SdSdSdSdSd:</span><br><span class="line">        SdSd.append(SdSdSd + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> SdSdSdSd <span class="keyword">in</span> Sd:</span><br><span class="line">    func(SdSdSdSd)</span><br><span class="line">    <span class="built_in">print</span> SdSd,</span><br><span class="line">    SdSd = []</span><br><span class="line"><span class="comment"># okay decompiling flag.pyc</span></span><br></pre></td></tr></table></figure><p>根据输出逆向分析func函数比较麻烦，并且数据并不是很大，flag也是常见的可见字符，所以尝试爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">output = [[<span class="number">3</span>, <span class="number">4</span>, <span class="number">18</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">98</span>], [<span class="number">104</span>], [<span class="number">4</span>, <span class="number">42</span>], [<span class="number">102</span>], [<span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">12</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">18</span>], [<span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">18</span>], [<span class="number">8</span>, <span class="number">8</span>], [<span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">18</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">12</span>], [<span class="number">4</span>, <span class="number">20</span>], [<span class="number">4</span>, <span class="number">20</span>], [<span class="number">4</span>, <span class="number">20</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">102</span>], [<span class="number">102</span>], [<span class="number">4</span>, <span class="number">18</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>], [<span class="number">4</span>, <span class="number">18</span>], [<span class="number">4</span>, <span class="number">20</span>], [<span class="number">4</span>, <span class="number">20</span>], [<span class="number">98</span>], [<span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>], [<span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>], [<span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>], [<span class="number">102</span>], [<span class="number">4</span>, <span class="number">18</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">14</span>], [<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;+-*/&#125;&#x27;</span></span><br><span class="line">tmp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> target:</span><br><span class="line">tmp.append(<span class="built_in">ord</span>(i))</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">SdSd = []</span><br><span class="line">src = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">SdSdSd</span>):</span><br><span class="line">    SdSdSdSdSd = <span class="literal">True</span></span><br><span class="line">    SdSdSdSd = <span class="number">2</span></span><br><span class="line">    sq = <span class="built_in">int</span>(math.sqrt(SdSdSd)) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> SdSdSdSd &lt;= sq:</span><br><span class="line">        <span class="keyword">if</span> SdSdSd % SdSdSdSd == <span class="number">0</span>:</span><br><span class="line">            SdSd.append(SdSdSdSd + <span class="number">1</span>)</span><br><span class="line">            SdSdSdSdSd = <span class="literal">False</span></span><br><span class="line">            func(SdSdSd / SdSdSdSd)</span><br><span class="line">            SdSdSdSd += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        SdSdSdSd += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> SdSdSdSdSd:</span><br><span class="line">        SdSd.append(SdSdSd + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">func(i)</span><br><span class="line">src.append(SdSd)</span><br><span class="line">SdSd = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> output:</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(src)):</span><br><span class="line"><span class="keyword">if</span> n == src[m]:</span><br><span class="line">flag += <span class="built_in">chr</span>(tmp[m])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;eb0cf2f1bfc9990ee3d399a2bbde3dd4&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Fuqiang"><a href="#Fuqiang" class="headerlink" title="Fuqiang"></a>Fuqiang</h4><h4 id="Hexie"><a href="#Hexie" class="headerlink" title="Hexie"></a>Hexie</h4><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><h4 id="Minzhu"><a href="#Minzhu" class="headerlink" title="Minzhu"></a>Minzhu</h4><p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/image-20220403145028343.png" alt="image-20220403145028343"></p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> ctf </tag>
            
            <tag> android </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018山东省赛科来杯wp</title>
      <link href="/2019/08/20/%E6%AF%94%E8%B5%9B/2018%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9B%E7%A7%91%E6%9D%A5%E6%9D%AF/"/>
      <url>/2019/08/20/%E6%AF%94%E8%B5%9B/2018%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9B%E7%A7%91%E6%9D%A5%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Affine"><a href="#Affine" class="headerlink" title="Affine"></a>Affine</h4><blockquote><p>仿射加密</p></blockquote><p>加密：𝐶&#x3D;𝐸([𝑎,𝑏],𝑝)&#x3D; (ap+b) 𝑚𝑜𝑑 26                         解密：𝑝&#x3D;𝐷([𝑎,𝑏],𝐶)&#x3D;((𝐶−𝑏)&#x2F;𝑎) 𝑚𝑜𝑑 26</p><p>又题目已知仿射加密变换为c&#x3D;（11m+7）mod26，而经过<a href="https://baike.baidu.com/item/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95">扩展欧几里得算法</a>可以求的a在$Z_{26}$上的乘法逆元，如下表：</p><table><thead><tr><th>1^-1</th><th>3^-1</th><th>5^-1</th><th>7^-1</th><th>9^-1</th><th>11^-1</th><th>15^-1</th><th>17^-1</th><th>19^-1</th><th>21^-1</th></tr></thead><tbody><tr><td>1</td><td>9</td><td>21</td><td>15</td><td>3</td><td>19</td><td>7</td><td>23</td><td>11</td><td>5</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3 扩展的欧几里得算法求乘法逆元</span></span><br><span class="line"><span class="comment">#欧几里得算法求最大公约数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">k = a // b</span><br><span class="line">remainder = a % b</span><br><span class="line"><span class="keyword">while</span> remainder != <span class="number">0</span>:</span><br><span class="line">a = b </span><br><span class="line">b = remainder</span><br><span class="line">k = a // b</span><br><span class="line">remainder = a % b</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">#改进欧几里得算法求线性方程的x与y</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_</span>(<span class="params">a, b</span>):</span><br><span class="line"><span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">k = a // b</span><br><span class="line">remainder = a % b</span><br><span class="line">x1, y1 = get_(b, remainder)</span><br><span class="line">x, y = y1, x1 - k * y1</span><br><span class="line"><span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&#x27;a:&#x27;</span>)</span><br><span class="line">b = <span class="built_in">input</span>(<span class="string">&#x27;b:&#x27;</span>)</span><br><span class="line">a, b = <span class="built_in">int</span>(a), <span class="built_in">int</span>(b)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#将初始b的绝对值进行保存</span></span><br><span class="line"><span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">m = <span class="built_in">abs</span>(b)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">m = b</span><br><span class="line">flag = get_gcd(a, b)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#判断最大公约数是否为1，若不是则没有逆元</span></span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">x, y = get_(a, b)</span><br><span class="line">x0 = x % m <span class="comment">#对于Python &#x27;%&#x27;就是求模运算，因此不需要&#x27;+m&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x0) <span class="comment">#x0就是所求的逆元</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Do not have!&quot;</span>)</span><br><span class="line"><span class="comment">#example:c = 11m+7(mod26),11关于26的乘法逆元是19</span></span><br></pre></td></tr></table></figure><p>$$<br>c&#x3D;11m+7(mod 26) \<br>m &#x3D; (c-7)11^{-1} (mod26)&#x3D;19(c-7)(mod26)<br>$$</p><p>求得逆元之后，由上式根据仿射加密算法对密文dikxourxd解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">&#x27;dikxourxd&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">i = i.upper()      <span class="comment">#转成大写字母，A代表1，B代表2</span></span><br><span class="line">tmp = <span class="number">19</span>*(<span class="built_in">ord</span>(i)-<span class="number">65</span>-<span class="number">7</span>)%<span class="number">26</span></span><br><span class="line">flag += <span class="built_in">chr</span>(tmp+<span class="number">65</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#ctfsdnisc</span></span><br></pre></td></tr></table></figure><h4 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h4><blockquote><p>维纳攻击</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RSAwienerHacker</span><br><span class="line">c = <span class="number">38230991316229399651823567590692301060044620412191737764632384680546256228451518238842965221394711848337832459443844446889468362154188214840736744657885858943810177675871991111466653158257191139605699916347308294995664530280816850482740530602254559123759121106338359220242637775919026933563326069449424391192</span></span><br><span class="line">e = <span class="number">354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619</span></span><br><span class="line">n = <span class="number">460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597</span></span><br><span class="line">d = hack_Rsa(e,n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment">#flag&#123;Wien3r_4tt@ck_1s_3AsY&#125;</span></span><br></pre></td></tr></table></figure><h4 id="神秘代码"><a href="#神秘代码" class="headerlink" title="神秘代码"></a>神秘代码</h4><blockquote><p>xor+aes_ecb</p></blockquote><p>题目给出了两个info文件，并且没有实际意义，尝试经过xor运算之后得到一段明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file1 = <span class="built_in">open</span>(<span class="string">&#x27;info_clear.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">file2 = <span class="built_in">open</span>(<span class="string">&#x27;info_crypt.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f1 = file1.read()</span><br><span class="line">f2 = file2.read()</span><br><span class="line">out=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f1)):</span><br><span class="line">    out += <span class="built_in">chr</span>(<span class="built_in">ord</span>(f1[i])^<span class="built_in">ord</span>(f2[i]))</span><br><span class="line"><span class="built_in">print</span> out</span><br><span class="line">file1.close()</span><br><span class="line">file2.close()</span><br><span class="line"><span class="comment">#i am a hydre agenT, coverly spying on the superHeroes. I am aware of the group that iS going to aTtack you...but Hydra has had its diffErences with you in the past, so i&#x27;m not going to maKe it vEry simple for You ....ecb...aes(I Vouch for this: 12345)...md5(this)...base64...</span></span><br></pre></td></tr></table></figure><p>提取出大写字母为THISTHEKEYIV，猜测可能是AES加密ECB模式的偏移为12345，密钥可能是这段话的md5值，解密后再用base64转换</p><p>aes加密学习</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h4 id="Sign-in"><a href="#Sign-in" class="headerlink" title="Sign_in"></a>Sign_in</h4><p>定位到MainActivity函数，发现一段比较，如果正确输出Congratulations!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkPassword</span><span class="params">(String arg4)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(arg4.equals(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.decode(<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="built_in">this</span>.getFlag()).reverse().toString(), <span class="number">0</span>)))) &#123;</span><br><span class="line">    <span class="built_in">this</span>.showMsgToast(<span class="string">&quot;Congratulations !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.showMsgToast(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getFlag</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.getBaseContext().getString(<span class="number">0x7F0B0020</span>); </span><br></pre></td></tr></table></figure><p>由于安卓开发里ID是由R文件管理的，所以我在R文件下寻找ID。然后由于toString()，根据字符串ID在string.xml中找到字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">toString</span> <span class="operator">=</span> <span class="number">0x7F0B0020</span>;  <span class="comment">// string:toString &quot;991YiZWOz81ZhFjZfJXdwk3X1k2XzIXZIt3ZhxmZ&quot;</span></span><br></pre></td></tr></table></figure><p>由此可以根据逻辑结构求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">string = <span class="string">&#x27;991YiZWOz81ZhFjZfJXdwk3X1k2XzIXZIt3ZhxmZ&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(string[::-<span class="number">1</span>]))</span><br><span class="line"><span class="comment">#flag&#123;Her3_i5_y0ur_f1ag_39fbc_&#125;</span></span><br></pre></td></tr></table></figure><h4 id="真亦是假，假亦是真"><a href="#真亦是假，假亦是真" class="headerlink" title="真亦是假，假亦是真"></a>真亦是假，假亦是真</h4><p>定位到MainActivity函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View arg3)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(check.checkflag(((EditText)MainActivity.<span class="built_in">this</span>.findViewById(<span class="number">0x7F070036</span>)).getText().toString())) &#123;  <span class="comment">// id:editText</span></span><br><span class="line">    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;you are right~!&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>而check方法是调用的checkso.so文件中的check函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">check</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.loadLibrary(<span class="string">&quot;checkso&quot;</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>check函数在.so文件中，解压缩apk找到.so文件</p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/image-20210704184649059-20220407093024112.png" alt="image-20210704184649059" style="zoom:50%;"><p>将.so文件载入ida64，定位到关键函数Java_com_example_p7xxtmx_1g_fakefunc_check_checkflag，分析函数得到了错误的字符串比较</p><p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/image-20210704192014566-20220407093751860.png" alt="image-20210704192014566"><code>view➡️open subviews➡️segments</code>查看导出表信息，发现存在init_arrary里面对strcmp进行了Inline hook</p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/image-20210704191953258-20220407093431471.png" style="zoom:50%;"><p>如果exports中找不到hook时，应当特别注意init_array中</p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/image-20210704192146729-20220407093448705.png" alt="image-20210704192146729" style="zoom:50%;"><p>定位到.init_array，跟进函数，发现strcmp()函数被hook到了sub_E28上，而sub_E28即为AES</p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/image-20210704194627206-20220407093507028.png" alt="image-20210704194627206" style="zoom:50%;"><p>所以密文就是<code>D3JTdmYyjbI6tijgp1wWc7fNU86D2Nt8dBS8R1v6i6g=</code>，key就是可以动调来解密的固定base64字符串<code>zilongwohenshuai</code>，解密得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;zilongwohenshuai&quot;</span></span><br><span class="line">msg = base64.b64decode(<span class="string">&quot;D3JTdmYyjbI6tijgp1wWc7fNU86D2Nt8dBS8R1v6i6g=&quot;</span>)</span><br><span class="line"><span class="comment">#print(msg)</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">enc =  cipher.decrypt(msg)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment">#flag&#123;fake_func_3nfxvs&#125;</span></span><br></pre></td></tr></table></figure><p>或者是先用皇家工具，先对input进行base64解密后，选择AES中的模式，ECB模式不需要向量IV。</p><img src="https://cdn.jsdelivr.net/gh/BlazeNe0/Img@main/uPic/image-20210704200434434-20220407093837963.png" alt="image-20210704200434434" style="zoom: 33%;"><p>也可以尝试jeb动态调试.so文件，看hook到底是怎么运作的</p><h3 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h3><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><h4 id="baby-login"><a href="#baby-login" class="headerlink" title="baby_login"></a>baby_login</h4><h4 id="Not-only-SMC"><a href="#Not-only-SMC" class="headerlink" title="Not_only_SMC"></a>Not_only_SMC</h4>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> ctf </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
